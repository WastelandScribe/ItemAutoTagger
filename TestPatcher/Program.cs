using ItemTagger.ItemTypeFinder;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Synthesis;

namespace ItemTagger
{
    public class Program
    {
        static Lazy<TaggerSettings> _lazySettings = null!;
        static TaggerSettings Settings => _lazySettings.Value;

        static DefaultTaggingConfigurations defaultTaggingConfigs = new();

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<IFallout4Mod, IFallout4ModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname: "Settings",
                    path: "settings.json",
                    out _lazySettings)
                .SetTypicalOpen(GameRelease.Fallout4, "ItemTags.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<IFallout4Mod, IFallout4ModGetter> state)
        {
            // first, get the configured tagging config

            var taggingConfig = getTaggingConfigByType(Settings.TaggingConfig);

            var typer = new ItemTyper(state);

            // process MISCs
            var miscs = state.LoadOrder.PriorityOrder.MiscItem().WinningOverrides();

            foreach (var misc in miscs)
            {
                var curType = typer.getMiscType(misc);
                if (curType != ItemType.None)
                {
                    var prefix = taggingConfig[curType];
                    if(prefix != "")
                    {
                        var newMisc = state.PatchMod.MiscItems.GetOrAddAsOverride(misc);
                        newMisc.Name = prefix + " " + newMisc.Name;
                    }
                    //var prefix = getTagForType(curType);
                }
            }
        }



        private static TaggingConfiguration getTaggingConfigByType(TaggingConfigType type)
        {
            if(type != TaggingConfigType.Custom)
            {
                return defaultTaggingConfigs.getConfigByType(type);
            }

            // otherwise, build a new one from custom settings
            var customConfig = new TaggingConfiguration(
                Settings.CustomConfig.tagShipment,
                Settings.CustomConfig.tagScrap,
                Settings.CustomConfig.tagResource,
                Settings.CustomConfig.tagLooseMod,
                Settings.CustomConfig.tagCollectible,
                Settings.CustomConfig.tagQuest,
                Settings.CustomConfig.tagCurrency,
                Settings.CustomConfig.tagValuable,
                Settings.CustomConfig.tagOtherMisc,
                Settings.CustomConfig.tagGoodChem,
                Settings.CustomConfig.tagBadChem,
                Settings.CustomConfig.tagFood,
                Settings.CustomConfig.tagFoodRaw,
                Settings.CustomConfig.tagFoodCrop,
                Settings.CustomConfig.tagFoodPrewar,
                Settings.CustomConfig.tagDrink,
                Settings.CustomConfig.tagLiquor,
                Settings.CustomConfig.tagNukacola,
                Settings.CustomConfig.tagSyringe,
                Settings.CustomConfig.tagDevice,
                Settings.CustomConfig.tagTool,
                Settings.CustomConfig.tagNews,
                Settings.CustomConfig.tagNote,
                Settings.CustomConfig.tagPerkmag,
                Settings.CustomConfig.tagMine,
                Settings.CustomConfig.tagGrenade,
                Settings.CustomConfig.tagKey,
                Settings.CustomConfig.tagAmmo,
                Settings.CustomConfig.tagHolotape,
                Settings.CustomConfig.tagHolotapeGame,
                Settings.CustomConfig.tagHolotapeSettings,
                Settings.CustomConfig.tagPipBoy,
                Settings.CustomConfig.extraValidTags
            );

            return customConfig;
        }

        private static String getTagForType(ItemType type)
        {
            switch (type)
            {
                case ItemType.OtherMisc:
                    return "aa";

                case ItemType.Shipment:
                    break;
                case ItemType.Scrap:
                    break;
                case ItemType.Resource:
                    break;
                case ItemType.LooseMod:
                    break;
                case ItemType.Collectible:
                    break;
                case ItemType.Quest:
                    break;
                case ItemType.Currency:
                    break;
                case ItemType.Valuable:
                    break;
                case ItemType.GoodChem:
                    break;
                case ItemType.BadChem:
                    break;
                case ItemType.Food:
                    break;
                case ItemType.FoodRaw:
                    break;
                case ItemType.FoodCrop:
                    break;
                case ItemType.FoodPrewar:
                    break;
                case ItemType.Drink:
                    break;
                case ItemType.Liquor:
                    break;
                case ItemType.Nukacola:
                    break;
                case ItemType.Syringe:
                    break;
                case ItemType.Device:
                    break;
                case ItemType.Tool:
                    break;
                case ItemType.News:
                    break;
                case ItemType.Note:
                    break;
                case ItemType.Perkmag:
                    break;
                case ItemType.Mine:
                    break;
                case ItemType.Grenade:
                    break;
                case ItemType.Key:
                    break;
                case ItemType.Ammo:
                    break;
                case ItemType.Holotape:
                    break;
                case ItemType.HolotapeGame:
                    break;
                case ItemType.HolotapeSettings:
                    break;
                case ItemType.PipBoy:
                    break;
                case ItemType.None:
                default:
                    return "";
            }
            return "";
        }
    }
}
